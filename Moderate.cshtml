@page
@{
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="~/css/ModerationStyle.css" />
    <title>Moderate Files</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <header>
        <h1>File Moderation</h1>
    </header>

    <!-- Container to hold the list of files for moderation -->
    <div id="filesContainer">
        <p>Loading files...</p>
    </div>

    <!-- Status message for displaying results or errors -->
    <div id="statusMessage" class="status-message"></div>

    <script>
        // Load files for moderation once the DOM content has loaded
        document.addEventListener('DOMContentLoaded', async function () {
            await loadFiles();
        });

        async function loadFiles() {
            try {
                const response = await axios.get('/Moderate/GetFilesToModerate');

                if (response.status === 200 && response.data.length > 0) {
                    const filesContainer = document.getElementById('filesContainer');
                    filesContainer.innerHTML = `
                                                <table class="table">
                                                    <thead>
                                                        <tr>
                                                            <th>File Name</th>
                                                            <th>Keywords</th>
                                                            <th>Subject</th>
                                                            <th>Date Created</th>
                                                            <th>Reports</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        ${response.data.map(file => `
                                                            <tr id="fileRow-${file.file_ID}">
                                                                <td>${file.fileName}</td>
                                                                <td>${file.keywords}</td>
                                                                <td>${file.subject}</td>
                                                                <td>${new Date(file.dateCreated).toISOString().slice(0, 10)}</td>
                                                                <td>${file.reports}</td>
                                                                <td>
                                                                    <button class="btn btn-primary" onclick="downloadFile('${file.fileName}')">Download</button>
                                                                    <button class="btn btn-danger" onclick="deleteFile(${file.file_ID})">Delete</button>
                                                                    <button class="btn btn-success" onclick="allowFile(${file.file_ID})">Allow</button>
                                                                </td>
                                                            </tr>
                                                        `).join('')}
                                                    </tbody>
                                                </table>
                                            `;
                } else {
                    document.getElementById('filesContainer').innerHTML = "<p>No files found for moderation.</p>";
                }
            } catch (error) {
                const errorMsg = error.response ? (error.response.data || error.response.statusText) : error.message;
                displayStatusMessage(`Error loading files: ${errorMsg}. Please try again later.`, 'error');
            }
        }

        async function deleteFile(fileId) {
            if (!confirm('Are you sure you want to delete this file?')) {
                return;
            }

            try {
                const response = await axios.delete(`/Moderate/DeleteFile?fileId=${fileId}`);
                if (response.status === 200) {
                    displayStatusMessage("File deleted successfully.", 'success');
                    document.getElementById(`fileRow-${fileId}`).remove();
                } else {
                    displayStatusMessage(`Error: ${response.data}`, 'error');
                }
            } catch (error) {
                displayStatusMessage(`Error deleting the file: ${error.response?.data ?? error.message}`, 'error');
            }
        }

        async function allowFile(fileId) {
            if (!confirm('Are you sure you want to allow this file?')) {
                return;
            }

            try {
                const response = await axios.post(`/Moderate/AllowFile?fileId=${fileId}`);
                if (response.status === 200) {
                    displayStatusMessage("File allowed successfully.", 'success');
                    document.getElementById(`fileRow-${fileId}`).remove();
                } else {
                    displayStatusMessage(`Error: ${response.data}`, 'error');
                }
            } catch (error) {
                displayStatusMessage(`Error allowing the file: ${error.response?.data ?? error.message}`, 'error');
            }
        }

        async function downloadFile(fileName) {
            try {
                const response = await axios.get(`/Moderate/DownloadFile?fileName=${fileName}`, {
                    responseType: 'blob'
                });

                if (response.status === 200) {
                    const url = window.URL.createObjectURL(new Blob([response.data]));
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', fileName);
                    document.body.appendChild(link);
                    link.click();
                    link.parentNode.removeChild(link);
                } else {
                    displayStatusMessage(`Error: ${response.data}`, 'error');
                }
            } catch (error) {
                displayStatusMessage(`Error downloading the file: ${error.response?.data ?? error.message}`, 'error');
            }
        }

        function displayStatusMessage(message, type) {
            const statusMessage = document.getElementById('statusMessage');
            statusMessage.innerText = message;
            statusMessage.className = `status-message ${type}`;

            // Automatically hide the message after 5 seconds
            setTimeout(() => {
                statusMessage.innerText = '';
                statusMessage.className = 'status-message';
            }, 5000);
        }
    </script>
    <style>
        .status-message {
            padding: 10px;
            margin-top: 15px;
            border-radius: 5px;
            font-weight: bold;
            text-align: center;
        }

            .status-message.success {
                color: #155724;
                background-color: #d4edda;
                border: 1px solid #c3e6cb;
            }

            .status-message.error {
                color: #721c24;
                background-color: #f8d7da;
                border: 1px solid #f5c6cb;
            }
    </style>
</body>
</html>